{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ChartIndicator } from \"./ChartIndicator\";\nimport { LineSeries } from \"../../xy/series/LineSeries\";\nimport * as $array from \"../../../core/util/Array\";\n/**\r\n * An implementation of a [[StockChart]] indicator.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\n\nvar ChaikinMoneyFlow =\n/** @class */\nfunction (_super) {\n  __extends(ChaikinMoneyFlow, _super);\n\n  function ChaikinMoneyFlow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_editableSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [{\n        key: \"period\",\n        name: _this.root.language.translateAny(\"Period\"),\n        type: \"number\"\n      }, {\n        key: \"seriesColor\",\n        name: _this.root.language.translateAny(\"Color\"),\n        type: \"color\"\n      }]\n    });\n    Object.defineProperty(_this, \"_themeTag\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"chaikinmoneyflow\"\n    });\n    return _this;\n  }\n\n  Object.defineProperty(ChaikinMoneyFlow.prototype, \"_createSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.panel.series.push(LineSeries.new(this._root, {\n        xAxis: this.xAxis,\n        yAxis: this.yAxis,\n        valueXField: \"valueX\",\n        valueYField: \"cmf\",\n        stroke: this.get(\"seriesColor\"),\n        fill: undefined\n      }));\n    }\n  });\n  Object.defineProperty(ChaikinMoneyFlow.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.isDirty(\"volumeSeries\")) {\n        this._dataDirty = true;\n      }\n\n      _super.prototype._prepareChildren.call(this);\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(ChaikinMoneyFlow.prototype, \"prepareData\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.series) {\n        var dataItems = this.get(\"stockSeries\").dataItems;\n        var volumeSeries_1 = this.get(\"volumeSeries\");\n        this.setRaw(\"field\", \"close\");\n\n        var data_1 = this._getDataArray(dataItems);\n\n        var i_1 = 0;\n        $array.each(dataItems, function (dataItem) {\n          var close = dataItem.get(\"valueY\");\n\n          if (close != null) {\n            var low = dataItem.get(\"lowValueY\", close);\n            var high = dataItem.get(\"highValueY\", close);\n            var volume = 1;\n            var volumeDI = volumeSeries_1.dataItems[i_1];\n\n            if (volumeDI) {\n              volume = volumeDI.get(\"valueY\", 1);\n            }\n\n            var mf = (close - low - (high - close)) / (high - low);\n\n            if (high == low) {\n              mf = 0;\n            }\n\n            var mfv = mf * volume;\n            data_1[i_1].mfv = mfv;\n            data_1[i_1].volume = volume;\n          }\n\n          i_1++;\n        });\n        var period_1 = this.get(\"period\", 20);\n        i_1 = 0;\n        $array.each(data_1, function (dataItem) {\n          if (i_1 >= period_1 - 1) {\n            var mfv = 0;\n            var volume = 0;\n\n            for (var j = i_1; j > i_1 - period_1; j--) {\n              mfv += data_1[j].mfv;\n              volume += data_1[j].volume;\n            }\n\n            dataItem.cmf = mfv / volume;\n          }\n\n          i_1++;\n        });\n        this.series.data.setAll(data_1);\n      }\n    }\n  });\n  Object.defineProperty(ChaikinMoneyFlow, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ChaikinMoneyFlow\"\n  });\n  Object.defineProperty(ChaikinMoneyFlow, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: ChartIndicator.classNames.concat([ChaikinMoneyFlow.className])\n  });\n  return ChaikinMoneyFlow;\n}(ChartIndicator);\n\nexport { ChaikinMoneyFlow };","map":{"version":3,"mappings":"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","names":["ChartIndicator","LineSeries","$array","__extends","Object","key","name","_this","root","language","translateAny","type","panel","series","push","new","_root","xAxis","yAxis","valueXField","valueYField","stroke","get","fill","undefined","isDirty","_dataDirty","_super","_prepareChildren","call","dataItems","volumeSeries_1","setRaw","data_1","_getDataArray","i_1","each","dataItem","close","low","high","volume","volumeDI","mf","mfv","period_1","j","cmf","data","setAll","classNames","concat","ChaikinMoneyFlow","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/indicators/ChaikinMoneyFlow.ts"],"sourcesContent":["import type { IIndicatorEditableSetting } from \"./Indicator\";\r\nimport type { XYSeries } from \"../../xy/series/XYSeries\";\r\n\r\nimport { ChartIndicator, IChartIndicatorSettings, IChartIndicatorPrivate, IChartIndicatorEvents } from \"./ChartIndicator\";\r\nimport { LineSeries } from \"../../xy/series/LineSeries\";\r\n\r\nimport * as $array from \"../../../core/util/Array\";\r\n\r\nexport interface IChaikinMoneyFlowSettings extends IChartIndicatorSettings {\r\n\r\n\t/**\r\n\t * Main volume series of the [[StockChart]].\r\n\t */\r\n\tvolumeSeries: XYSeries;\r\n\r\n}\r\n\r\nexport interface IChaikinMoneyFlowPrivate extends IChartIndicatorPrivate {\r\n}\r\n\r\nexport interface IChaikinMoneyFlowEvents extends IChartIndicatorEvents {\r\n}\r\n\r\n\r\n/**\r\n * An implementation of a [[StockChart]] indicator.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\r\nexport class ChaikinMoneyFlow extends ChartIndicator {\r\n\tpublic static className: string = \"ChaikinMoneyFlow\";\r\n\tpublic static classNames: Array<string> = ChartIndicator.classNames.concat([ChaikinMoneyFlow.className]);\r\n\r\n\tdeclare public _settings: IChaikinMoneyFlowSettings;\r\n\tdeclare public _privateSettings: IChaikinMoneyFlowPrivate;\r\n\tdeclare public _events: IChaikinMoneyFlowEvents;\r\n\r\n\t/**\r\n\t * Indicator series.\r\n\t */\r\n\tdeclare public series: LineSeries;\r\n\r\n\tpublic _editableSettings: IIndicatorEditableSetting[] = [{\r\n\t\tkey: \"period\",\r\n\t\tname: this.root.language.translateAny(\"Period\"),\r\n\t\ttype: \"number\"\r\n\t}, {\r\n\t\tkey: \"seriesColor\",\r\n\t\tname: this.root.language.translateAny(\"Color\"),\r\n\t\ttype: \"color\"\r\n\t}];\r\n\r\n\tprotected _themeTag: string = \"chaikinmoneyflow\";\r\n\r\n\tpublic _createSeries(): LineSeries {\r\n\t\treturn this.panel.series.push(LineSeries.new(this._root, {\r\n\t\t\txAxis: this.xAxis,\r\n\t\t\tyAxis: this.yAxis,\r\n\t\t\tvalueXField: \"valueX\",\r\n\t\t\tvalueYField: \"cmf\",\r\n\t\t\tstroke: this.get(\"seriesColor\"),\r\n\t\t\tfill: undefined\r\n\t\t}))\r\n\t}\r\n\r\n\tpublic _prepareChildren() {\r\n\t\tif (this.isDirty(\"volumeSeries\")) {\r\n\t\t\tthis._dataDirty = true;\r\n\t\t}\r\n\t\tsuper._prepareChildren();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic prepareData() {\r\n\t\tif (this.series) {\r\n\r\n\t\t\tconst dataItems = this.get(\"stockSeries\").dataItems;\r\n\t\t\tconst volumeSeries = this.get(\"volumeSeries\");\r\n\t\t\tthis.setRaw(\"field\", \"close\");\r\n\r\n\t\t\tlet data: Array<any> = this._getDataArray(dataItems);\r\n\t\t\tlet i = 0;\r\n\t\t\t$array.each(dataItems, (dataItem) => {\r\n\t\t\t\tlet close = dataItem.get(\"valueY\") as number;\r\n\t\t\t\tif (close != null) {\r\n\t\t\t\t\tlet low = dataItem.get(\"lowValueY\", close) as number;\r\n\t\t\t\t\tlet high = dataItem.get(\"highValueY\", close) as number;\r\n\r\n\t\t\t\t\tlet volume = 1;\r\n\r\n\t\t\t\t\tconst volumeDI = volumeSeries.dataItems[i];\r\n\t\t\t\t\tif (volumeDI) {\r\n\t\t\t\t\t\tvolume = volumeDI.get(\"valueY\", 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet mf = ((close - low) - (high - close)) / (high - low)\r\n\t\t\t\t\tif (high == low) {\r\n\t\t\t\t\t\tmf = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet mfv = mf * volume;\r\n\t\t\t\t\tdata[i].mfv = mfv;\r\n\t\t\t\t\tdata[i].volume = volume;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t})\r\n\r\n\t\t\tconst period = this.get(\"period\", 20);\r\n\t\t\ti = 0;\r\n\t\t\t$array.each(data, (dataItem) => {\r\n\t\t\t\tif (i >= period - 1) {\r\n\t\t\t\t\tlet mfv = 0;\r\n\t\t\t\t\tlet volume = 0;\r\n\r\n\t\t\t\t\tfor (let j = i; j > i - period; j--) {\r\n\t\t\t\t\t\tmfv += data[j].mfv;\r\n\t\t\t\t\t\tvolume += data[j].volume;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.cmf = mfv / volume;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t})\r\n\r\n\t\t\tthis.series.data.setAll(data);\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}