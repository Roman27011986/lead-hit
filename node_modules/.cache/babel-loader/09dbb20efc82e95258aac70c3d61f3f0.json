{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-a31d7f92\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  key: 0\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Подбор жилья\", -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.handleSubmit && $options.handleSubmit(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.id = $event),\n    class: \"custom-input\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.id]]), !$data.isValid ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString($data.error), 1\n  /* TEXT */\n  )) : _createCommentVNode(\"v-if\", true), _hoisted_2], 32\n  /* HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;;;;;;;gEAIQA,oBAA2C,QAA3C,EAA2C;EAAnCC,IAAI,EAAC;AAA8B,CAA3C,EAAsB,cAAtB,EAAkC;AAAA;AAAlC;;;uBAHJC,oBAIO,MAJP,EAIO;IAJAC,QAAM,wDAAUC,uDAAV,EAAsB,WAAtB;EAIN,CAJP,mBACIJ,oBAA2C,OAA3C,EAA2C;+DAA3BK,WAAEC,OAAyB;IAAvBC,KAAK,EAAC;EAAiB,CAA3C;;EAAA,kBAAgBF,cACHA,+BAAbH,oBAAyC,MAAzC,EAAyCM,UAAzC,EAAyCC,iBAAfJ,WAAe,CAAzC,EAA+B;EAAA;EAA/B,wCACAK,WAHJ;;EAAA","names":["_createElementVNode","type","_createElementBlock","onSubmit","$options","$data","$event","class","_hoisted_1","_toDisplayString","_hoisted_2"],"sourceRoot":"","sources":["D:\\lead-hit\\src\\components\\form\\AuthForm.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"handleSubmit\">\r\n        <input v-model=\"id\" class=\"custom-input\" />\r\n        <span v-if=\"!isValid\" >{{ error }}</span>\r\n        <button type=\"submit\">Подбор жилья</button>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\nimport { getAuth } from \"../../services/auth.service\";\r\nimport {\r\n    emailValidation,\r\n    isRequired\r\n} from \"../../utils/validationRules.js\";\r\nexport default {\r\n    data() {\r\n        return {\r\n            id: \"\",\r\n            isValid: true,\r\n            error: \"\",\r\n            errorMessage:'qweqeq'\r\n        };\r\n    },\r\n    \r\n    methods: {\r\n       async handleSubmit() {\r\n            this.$emit(\"submit\", {\r\n                id: this.id,\r\n            });\r\n            try {\r\n                const { data } = await getAuth(this.id);\r\n                this.$router.push({ name: \"analytics\" });\r\n                if (data?.message) {\r\n                    localStorage.setItem('leadhit-site-id', this.id )\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        },\r\n\r\n\r\n        validete(value) {\r\n            console.log(this.rules.emailValidation(value));\r\n            const { hasPassed, message } = this.rules.emailValidation(value)\r\n            if (!hasPassed) {\r\n                this.error = message || this.errorMessage;\r\n                return\r\n            }\r\n            return hasPassed;\r\n            \r\n            // this.isValid = this.rules.emailValidation((rule) => {\r\n\r\n            //     const { hasPassed, message } = rule(value);\r\n            //     if (!hasPassed) {\r\n            //         this.error = message || this.errorMessage;\r\n            //     }\r\n            //     return hasPassed;\r\n            // });\r\n           \r\n        },\r\n\r\n        // reset() {\r\n        //     this.$$emit(\"input\", \"\");\r\n        // },\r\n    },\r\n\r\n    computed: {\r\n        rules() {\r\n            return {\r\n                emailValidation,\r\n                isRequired\r\n            };\r\n        },\r\n\r\n        emailRules() {\r\n            return [this.rules.isRequired, this.rules.emailValidation];\r\n        },\r\n    },\r\n\r\n    watch: {\r\n        id(v) {\r\n            this.validete(v);\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n   .custom-input {\r\n       min-height: 40px;\r\n        font-size: 18px;\r\n        outline: none;\r\n        line-height: inherit;\r\n        padding: 8px 15px;\r\n   }\r\n\r\n        .custom-input::placeholder {\r\n            color: inherit;\r\n        }\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}