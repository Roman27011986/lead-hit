{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Indicator } from \"./Indicator\";\nimport { StockPanel } from \"../StockPanel\";\nimport { XYCursor } from \"../../xy/XYCursor\";\nimport { DateAxis } from \"../../xy/axes/DateAxis\";\nimport { GaplessDateAxis } from \"../../xy/axes/GaplessDateAxis\";\nimport { ValueAxis } from \"../../xy/axes/ValueAxis\";\nimport { AxisRendererX } from \"../../xy/axes/AxisRendererX\";\nimport { AxisRendererY } from \"../../xy/axes/AxisRendererY\";\nimport { Tooltip } from \"../../../core/render/Tooltip\";\nimport { StockLegend } from \"../StockLegend\";\n/**\r\n * A base class for chart-based [[StockChart]] indicators.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\n\nvar ChartIndicator =\n/** @class */\nfunction (_super) {\n  __extends(ChartIndicator, _super);\n\n  function ChartIndicator() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"panel\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"xAxis\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"yAxis\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"cursor\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"legend\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_themeTag\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(ChartIndicator.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterNew.call(this);\n\n      var stockChart = this.get(\"stockChart\");\n      var stockSeries = this.get(\"stockSeries\");\n      var seriesChart = stockSeries.chart;\n      var root = this._root;\n\n      if (stockChart && seriesChart) {\n        // make chart\n        var themeTags = [\"indicator\"];\n\n        if (this._themeTag) {\n          themeTags.push(this._themeTag);\n        }\n\n        var chart = stockChart.panels.push(StockPanel.new(root, {\n          wheelY: \"zoomX\",\n          panX: true,\n          panY: false,\n          themeTags: themeTags\n        }));\n        chart.addTag(\"indicator\");\n        this.panel = chart;\n        var seriesXAxis = stockSeries.get(\"xAxis\"); // xAxis\n\n        var xRenderer = AxisRendererX.new(root, {});\n        var xAxis = void 0;\n        var baseInterval = seriesXAxis.get(\"baseInterval\");\n        var start = seriesXAxis.get(\"start\");\n        var end = seriesXAxis.get(\"end\");\n\n        if (seriesXAxis instanceof GaplessDateAxis) {\n          xAxis = chart.xAxes.push(GaplessDateAxis.new(root, {\n            renderer: xRenderer,\n            baseInterval: baseInterval\n          }));\n        } else {\n          xAxis = chart.xAxes.push(DateAxis.new(root, {\n            renderer: xRenderer,\n            baseInterval: baseInterval\n          }));\n        }\n\n        xAxis.set(\"groupData\", seriesXAxis.get(\"groupData\"));\n        xAxis.set(\"groupCount\", seriesXAxis.get(\"groupCount\"));\n        xAxis.set(\"tooltip\", Tooltip.new(root, {\n          forceHidden: true\n        }));\n        xAxis.setAll({\n          start: start,\n          end: end\n        });\n        this.xAxis = xAxis; // yAxis\n\n        var yRenderer = AxisRendererY.new(root, {});\n        var yAxis = chart.yAxes.push(ValueAxis.new(root, {\n          renderer: yRenderer,\n          tooltip: Tooltip.new(root, {\n            forceHidden: true\n          })\n        }));\n        this.yAxis = yAxis;\n\n        var series = this._createSeries();\n\n        this.series = series; // legend\n\n        var legend = chart.topPlotContainer.children.insertIndex(0, StockLegend.new(root, {\n          stockChart: this.get(\"stockChart\")\n        }));\n        legend.data.push(series);\n        var legendDataItem = legend.dataItems[legend.dataItems.length - 1];\n        legendDataItem.set(\"panel\", chart);\n        legendDataItem.get(\"marker\").set(\"forceHidden\", true);\n        legendDataItem.get(\"settingsButton\").setPrivate(\"customData\", this);\n        chart.set(\"cursor\", XYCursor.new(root, {\n          yAxis: yAxis,\n          xAxis: xAxis\n        }));\n      }\n    }\n  });\n  Object.defineProperty(ChartIndicator.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var stockChart = this.get(\"stockChart\");\n      stockChart.panels.removeValue(this.panel);\n    }\n  });\n  Object.defineProperty(ChartIndicator, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ChartIndicator\"\n  });\n  Object.defineProperty(ChartIndicator, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Indicator.classNames.concat([ChartIndicator.className])\n  });\n  return ChartIndicator;\n}(Indicator);\n\nexport { ChartIndicator };","map":{"version":3,"mappings":"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","names":["Indicator","StockPanel","XYCursor","DateAxis","GaplessDateAxis","ValueAxis","AxisRendererX","AxisRendererY","Tooltip","StockLegend","__extends","Object","_super","_afterNew","call","stockChart","get","stockSeries","seriesChart","chart","root","_root","themeTags","_themeTag","push","panels","new","wheelY","panX","panY","addTag","panel","seriesXAxis","xRenderer","xAxis","baseInterval","start","end","xAxes","renderer","set","forceHidden","setAll","yRenderer","yAxis","yAxes","tooltip","series","_createSeries","legend","topPlotContainer","children","insertIndex","data","legendDataItem","dataItems","length","setPrivate","removeValue","classNames","concat","ChartIndicator","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/indicators/ChartIndicator.ts"],"sourcesContent":["import type { XYSeries } from \"../../xy/series/XYSeries\";\r\nimport type { AxisRenderer } from \"../../xy/axes/AxisRenderer\";\r\n\r\nimport { Indicator, IIndicatorSettings, IIndicatorPrivate, IIndicatorEvents } from \"./Indicator\";\r\nimport { StockPanel } from \"../StockPanel\";\r\nimport { XYCursor } from \"../../xy/XYCursor\";\r\nimport { DateAxis } from \"../../xy/axes/DateAxis\";\r\nimport { GaplessDateAxis } from \"../../xy/axes/GaplessDateAxis\";\r\nimport { ValueAxis } from \"../../xy/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../xy/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../xy/axes/AxisRendererY\";\r\nimport { Tooltip } from \"../../../core/render/Tooltip\";\r\nimport { StockLegend } from \"../StockLegend\";\r\n\r\n\r\nexport interface IChartIndicatorSettings extends IIndicatorSettings {\r\n}\r\n\r\nexport interface IChartIndicatorPrivate extends IIndicatorPrivate {\r\n}\r\n\r\nexport interface IChartIndicatorEvents extends IIndicatorEvents {\r\n}\r\n\r\n\r\n/**\r\n * A base class for chart-based [[StockChart]] indicators.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\r\nexport abstract class ChartIndicator extends Indicator {\r\n\tpublic static className: string = \"ChartIndicator\";\r\n\tpublic static classNames: Array<string> = Indicator.classNames.concat([ChartIndicator.className]);\r\n\r\n\tdeclare public _settings: IChartIndicatorSettings;\r\n\tdeclare public _privateSettings: IChartIndicatorPrivate;\r\n\tdeclare public _events: IChartIndicatorEvents;\r\n\r\n\tpublic panel!: StockPanel;\r\n\tpublic xAxis!: DateAxis<AxisRenderer>;\r\n\tpublic yAxis!: ValueAxis<AxisRenderer>;\r\n\tpublic cursor!: XYCursor;\r\n\tpublic legend!: StockLegend;\r\n\r\n\tprotected _themeTag?: string;\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\t\tconst stockSeries = this.get(\"stockSeries\");\r\n\t\tconst seriesChart = stockSeries.chart;\r\n\t\tconst root = this._root;\r\n\t\tif (stockChart && seriesChart) {\r\n\t\t\t// make chart\r\n\t\t\tlet themeTags = [\"indicator\"];\r\n\t\t\tif (this._themeTag) {\r\n\t\t\t\tthemeTags.push(this._themeTag);\r\n\t\t\t}\r\n\t\t\tconst chart = stockChart.panels.push(StockPanel.new(root, { wheelY: \"zoomX\", panX: true, panY: false, themeTags: themeTags }));\r\n\t\t\tchart.addTag(\"indicator\");\r\n\t\t\tthis.panel = chart;\r\n\r\n\t\t\tconst seriesXAxis = stockSeries.get(\"xAxis\") as any;\r\n\r\n\t\t\t// xAxis\r\n\t\t\tconst xRenderer = AxisRendererX.new(root, {});\r\n\t\t\tlet xAxis: DateAxis<AxisRenderer> | GaplessDateAxis<AxisRenderer> | undefined;\r\n\t\t\tlet baseInterval = seriesXAxis.get(\"baseInterval\");\r\n\t\t\tlet start = seriesXAxis.get(\"start\");\r\n\t\t\tlet end = seriesXAxis.get(\"end\");\r\n\r\n\t\t\tif (seriesXAxis instanceof GaplessDateAxis) {\r\n\t\t\t\txAxis = chart.xAxes.push(GaplessDateAxis.new(root, { renderer: xRenderer, baseInterval: baseInterval }));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\txAxis = chart.xAxes.push(DateAxis.new(root, { renderer: xRenderer, baseInterval: baseInterval }));\r\n\t\t\t}\r\n\r\n\t\t\txAxis.set(\"groupData\", seriesXAxis.get(\"groupData\"));\r\n\t\t\txAxis.set(\"groupCount\", seriesXAxis.get(\"groupCount\"));\r\n\r\n\t\t\txAxis.set(\"tooltip\", Tooltip.new(root, { forceHidden: true }));\r\n\r\n\t\t\txAxis.setAll({ start: start, end: end })\r\n\t\t\tthis.xAxis = xAxis;\r\n\r\n\t\t\t// yAxis\r\n\t\t\tconst yRenderer = AxisRendererY.new(root, {});\r\n\t\t\tconst yAxis = chart.yAxes.push(ValueAxis.new(root, {\r\n\t\t\t\trenderer: yRenderer,\r\n\t\t\t\ttooltip: Tooltip.new(root, { forceHidden: true })\r\n\t\t\t}))\r\n\t\t\tthis.yAxis = yAxis;\r\n\r\n\t\t\tconst series = this._createSeries();\r\n\t\t\tthis.series = series;\r\n\r\n\t\t\t// legend\r\n\t\t\tconst legend = chart.topPlotContainer.children.insertIndex(0,\r\n\t\t\t\tStockLegend.new(root, { stockChart: this.get(\"stockChart\") })\r\n\t\t\t);\r\n\r\n\t\t\tlegend.data.push(series);\r\n\r\n\t\t\tconst legendDataItem = legend.dataItems[legend.dataItems.length - 1];\r\n\t\t\tlegendDataItem.set(\"panel\", chart);\r\n\t\t\tlegendDataItem.get(\"marker\").set(\"forceHidden\", true);\r\n\r\n\t\t\tlegendDataItem.get(\"settingsButton\").setPrivate(\"customData\", this);\r\n\r\n\t\t\tchart.set(\"cursor\", XYCursor.new(root, { yAxis: yAxis, xAxis: xAxis }));\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _dispose() {\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\t\tstockChart.panels.removeValue(this.panel);\r\n\t}\r\n\r\n\tprotected abstract _createSeries(): XYSeries;\r\n}"]},"metadata":{},"sourceType":"module"}