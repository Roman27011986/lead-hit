{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { SimpleLineSeries } from \"./SimpleLineSeries\";\nimport * as $math from \"../../../core/util/Math\";\n\nvar AverageSeries =\n/** @class */\nfunction (_super) {\n  __extends(AverageSeries, _super);\n\n  function AverageSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_tag\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"average\"\n    });\n    return _this;\n  }\n\n  Object.defineProperty(AverageSeries.prototype, \"_updateSegment\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      var _a;\n\n      var diP1 = this._di[index][\"p1\"];\n      var diP2 = this._di[index][\"p2\"];\n      var series = this.get(\"series\");\n\n      if (series) {\n        var xAxis = this.get(\"xAxis\");\n        var min = xAxis.getPrivate(\"min\", 0) + 1;\n        var max = xAxis.getPrivate(\"max\", 1) - 1;\n        var x1 = $math.fitToRange(diP1.get(\"valueX\"), min, max);\n        var x2 = $math.fitToRange(diP2.get(\"valueX\"), min, max);\n        var di1 = xAxis.getSeriesItem(series, Math.max(0, xAxis.valueToPosition(x1)));\n        var di2 = xAxis.getSeriesItem(series, Math.min(1, xAxis.valueToPosition(x2)));\n        var field = this.get(\"field\") + \"Y\";\n\n        if (di1 && di2) {\n          var i1 = series.dataItems.indexOf(di1);\n          var i2 = series.dataItems.indexOf(di2);\n\n          if (i1 > i2) {\n            _a = __read([i2, i1], 2), i1 = _a[0], i2 = _a[1];\n          }\n\n          var sum = 0;\n          var count = 0;\n\n          for (var i = i1; i <= i2; i++) {\n            var di = series.dataItems[i];\n            var value = di.get(field);\n\n            if (value != null) {\n              sum += value;\n              count++;\n            }\n          }\n\n          var average = sum / count;\n          diP1.set(\"valueX\", x1);\n          diP2.set(\"valueX\", x2);\n          diP1.set(\"valueY\", average);\n          diP1.set(\"valueYWorking\", average);\n          diP2.set(\"valueY\", average);\n          diP2.set(\"valueYWorking\", average);\n\n          this._positionBullets(diP1);\n\n          this._positionBullets(diP2);\n        }\n      }\n    }\n  }); // need to override so that location would not be set\n\n  Object.defineProperty(AverageSeries.prototype, \"_setXLocation\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(AverageSeries, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"AverageSeries\"\n  });\n  Object.defineProperty(AverageSeries, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: SimpleLineSeries.classNames.concat([AverageSeries.className])\n  });\n  return AverageSeries;\n}(SimpleLineSeries);\n\nexport { AverageSeries };","map":{"version":3,"mappings":";AAAA,SAASA,gBAAT,QAAiH,oBAAjH;AACA,OAAO,KAAKC,KAAZ,MAAuB,yBAAvB;;AAqBA;AAAA;AAAA;EAAmCC;;EAAnC;IAAA;;IAQCC;sBAAA;wBAAA;oBAAA;aAAiB;IAAjB;;EA+DA;;;;;;WA7DA,UAAyBC,KAAzB,EAAsC;;;MACrC,IAAMC,IAAI,GAAG,KAAKC,GAAL,CAASF,KAAT,EAAgB,IAAhB,CAAb;MACA,IAAMG,IAAI,GAAG,KAAKD,GAAL,CAASF,KAAT,EAAgB,IAAhB,CAAb;MAEA,IAAMI,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAf;;MACA,IAAID,MAAJ,EAAY;QAEX,IAAME,KAAK,GAAG,KAAKD,GAAL,CAAS,OAAT,CAAd;QAEA,IAAME,GAAG,GAAGD,KAAK,CAACE,UAAN,CAAiB,KAAjB,EAAwB,CAAxB,IAA6B,CAAzC;QACA,IAAMC,GAAG,GAAGH,KAAK,CAACE,UAAN,CAAiB,KAAjB,EAAwB,CAAxB,IAA6B,CAAzC;QAEA,IAAIE,EAAE,GAAGb,KAAK,CAACc,UAAN,CAAiBV,IAAI,CAACI,GAAL,CAAS,QAAT,CAAjB,EAA4CE,GAA5C,EAAiDE,GAAjD,CAAT;QACA,IAAIG,EAAE,GAAGf,KAAK,CAACc,UAAN,CAAiBR,IAAI,CAACE,GAAL,CAAS,QAAT,CAAjB,EAA4CE,GAA5C,EAAiDE,GAAjD,CAAT;QAEA,IAAMI,GAAG,GAAGP,KAAK,CAACQ,aAAN,CAAoBV,MAApB,EAA4BW,IAAI,CAACN,GAAL,CAAS,CAAT,EAAYH,KAAK,CAACU,eAAN,CAAsBN,EAAtB,CAAZ,CAA5B,CAAZ;QACA,IAAMO,GAAG,GAAGX,KAAK,CAACQ,aAAN,CAAoBV,MAApB,EAA4BW,IAAI,CAACR,GAAL,CAAS,CAAT,EAAYD,KAAK,CAACU,eAAN,CAAsBJ,EAAtB,CAAZ,CAA5B,CAAZ;QAEA,IAAMM,KAAK,GAAG,KAAKb,GAAL,CAAS,OAAT,IAAoB,GAAlC;;QAEA,IAAIQ,GAAG,IAAII,GAAX,EAAgB;UACf,IAAIE,EAAE,GAAGf,MAAM,CAACgB,SAAP,CAAiBC,OAAjB,CAAyBR,GAAzB,CAAT;UACA,IAAIS,EAAE,GAAGlB,MAAM,CAACgB,SAAP,CAAiBC,OAAjB,CAAyBJ,GAAzB,CAAT;;UAEA,IAAIE,EAAE,GAAGG,EAAT,EAAa;YACZC,YAAW,CAACD,EAAD,EAAKH,EAAL,CAAX,EAAmB,CAAnB,GAACA,EAAE,QAAH,EAAKG,EAAE,QAAP;UACA;;UAED,IAAIE,GAAG,GAAG,CAAV;UACA,IAAIC,KAAK,GAAG,CAAZ;;UAEA,KAAK,IAAIC,CAAC,GAAGP,EAAb,EAAiBO,CAAC,IAAIJ,EAAtB,EAA0BI,CAAC,EAA3B,EAA+B;YAC9B,IAAMC,EAAE,GAAGvB,MAAM,CAACgB,SAAP,CAAiBM,CAAjB,CAAX;YACA,IAAME,KAAK,GAAGD,EAAE,CAACtB,GAAH,CAAOa,KAAP,CAAd;;YACA,IAAIU,KAAK,IAAI,IAAb,EAAmB;cAClBJ,GAAG,IAAII,KAAP;cACAH,KAAK;YACL;UACD;;UAED,IAAMI,OAAO,GAAGL,GAAG,GAAGC,KAAtB;UAEAxB,IAAI,CAAC6B,GAAL,CAAS,QAAT,EAAmBpB,EAAnB;UACAP,IAAI,CAAC2B,GAAL,CAAS,QAAT,EAAmBlB,EAAnB;UAEAX,IAAI,CAAC6B,GAAL,CAAS,QAAT,EAAmBD,OAAnB;UACA5B,IAAI,CAAC6B,GAAL,CAAS,eAAT,EAA0BD,OAA1B;UAEA1B,IAAI,CAAC2B,GAAL,CAAS,QAAT,EAAmBD,OAAnB;UACA1B,IAAI,CAAC2B,GAAL,CAAS,eAAT,EAA0BD,OAA1B;;UAEA,KAAKE,gBAAL,CAAsB9B,IAAtB;;UACA,KAAK8B,gBAAL,CAAsB5B,IAAtB;QACA;MACD;IACD;KAjEF,CAmEC;;;;;;WACA,aAEC;;EArEDJ;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0CH,gBAAgB,CAACoC,UAAjB,CAA4BC,MAA5B,CAAmC,CAACC,aAAa,CAACC,SAAf,CAAnC;EAA1C;EAqED;AAAC,CAvED,CAAmCvC,gBAAnC;;SAAasC","names":["SimpleLineSeries","$math","__extends","Object","index","diP1","_di","diP2","series","get","xAxis","min","getPrivate","max","x1","fitToRange","x2","di1","getSeriesItem","Math","valueToPosition","di2","field","i1","dataItems","indexOf","i2","_a","sum","count","i","di","value","average","set","_positionBullets","classNames","concat","AverageSeries","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/drawing/AverageSeries.ts"],"sourcesContent":["import { SimpleLineSeries, ISimpleLineSeriesSettings, ISimpleLineSeriesPrivate, ISimpleLineSeriesDataItem } from \"./SimpleLineSeries\";\r\nimport * as $math from \"../../../core/util/Math\";\r\n\r\nexport interface IAverageSeriesDataItem extends ISimpleLineSeriesDataItem {\r\n\r\n}\r\n\r\nexport interface IAverageSeriesSettings extends ISimpleLineSeriesSettings {\r\n\r\n\t/**\r\n\t * Value field to use for calculations.\r\n\t *\r\n\t * @default \"value\"\r\n\t */\r\n\tfield: \"open\" | \"value\" | \"low\" | \"high\";\r\n\r\n}\r\n\r\nexport interface IAverageSeriesPrivate extends ISimpleLineSeriesPrivate {\r\n\r\n}\r\n\r\nexport class AverageSeries extends SimpleLineSeries {\r\n\tpublic static className: string = \"AverageSeries\";\r\n\tpublic static classNames: Array<string> = SimpleLineSeries.classNames.concat([AverageSeries.className]);\r\n\r\n\tdeclare public _settings: IAverageSeriesSettings;\r\n\tdeclare public _privateSettings: IAverageSeriesPrivate;\r\n\tdeclare public _dataItemSettings: IAverageSeriesDataItem;\r\n\r\n\tprotected _tag = \"average\";\r\n\r\n\tprotected _updateSegment(index: number) {\r\n\t\tconst diP1 = this._di[index][\"p1\"];\r\n\t\tconst diP2 = this._di[index][\"p2\"];\r\n\r\n\t\tconst series = this.get(\"series\");\r\n\t\tif (series) {\r\n\r\n\t\t\tconst xAxis = this.get(\"xAxis\");\r\n\r\n\t\t\tconst min = xAxis.getPrivate(\"min\", 0) + 1;\r\n\t\t\tconst max = xAxis.getPrivate(\"max\", 1) - 1;\r\n\r\n\t\t\tlet x1 = $math.fitToRange(diP1.get(\"valueX\" as any), min, max);\r\n\t\t\tlet x2 = $math.fitToRange(diP2.get(\"valueX\" as any), min, max);\r\n\r\n\t\t\tconst di1 = xAxis.getSeriesItem(series, Math.max(0, xAxis.valueToPosition(x1)));\r\n\t\t\tconst di2 = xAxis.getSeriesItem(series, Math.min(1, xAxis.valueToPosition(x2)));\r\n\r\n\t\t\tconst field = this.get(\"field\") + \"Y\";\r\n\r\n\t\t\tif (di1 && di2) {\r\n\t\t\t\tlet i1 = series.dataItems.indexOf(di1);\r\n\t\t\t\tlet i2 = series.dataItems.indexOf(di2);\r\n\r\n\t\t\t\tif (i1 > i2) {\r\n\t\t\t\t\t[i1, i2] = [i2, i1];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum = 0;\r\n\t\t\t\tlet count = 0;\r\n\r\n\t\t\t\tfor (var i = i1; i <= i2; i++) {\r\n\t\t\t\t\tconst di = series.dataItems[i];\r\n\t\t\t\t\tconst value = di.get(field as any);\r\n\t\t\t\t\tif (value != null) {\r\n\t\t\t\t\t\tsum += value;\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst average = sum / count;\r\n\r\n\t\t\t\tdiP1.set(\"valueX\", x1);\r\n\t\t\t\tdiP2.set(\"valueX\", x2);\r\n\r\n\t\t\t\tdiP1.set(\"valueY\", average);\r\n\t\t\t\tdiP1.set(\"valueYWorking\", average);\r\n\r\n\t\t\t\tdiP2.set(\"valueY\", average);\r\n\t\t\t\tdiP2.set(\"valueYWorking\", average);\r\n\r\n\t\t\t\tthis._positionBullets(diP1);\r\n\t\t\t\tthis._positionBullets(diP2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// need to override so that location would not be set\r\n\tprotected _setXLocation() {\r\n\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}