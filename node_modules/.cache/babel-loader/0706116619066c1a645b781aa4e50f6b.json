{"ast":null,"code":"import { vModelText as _vModelText, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-a31d7f92\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"form__error-text\"\n};\nconst _hoisted_2 = {\n  class: \"form__btn\",\n  type: \"submit\",\n  ref: \"btn\",\n  disabled: \"\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    class: \"form\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.handleSubmit && $options.handleSubmit(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.id = $event),\n    class: _normalizeClass([\"custom-input\", !$data.isValid && 'custom-input--error'])\n  }, null, 2\n  /* CLASS */\n  ), [[_vModelText, $data.id]]), !$data.isValid ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString($data.error), 1\n  /* TEXT */\n  )) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", _hoisted_2, \"Войти\", 512\n  /* NEED_PATCH */\n  )], 32\n  /* HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;;;;;EAGcA,KAAK,EAAC;;;EACJA,KAAK,EAAC;EAAYC,IAAI,EAAC;EAASC,GAAG,EAAC;EAAMC,QAAQ,EAAR;;;uBAHtDC,oBAIO,MAJP,EAIO;IAJDJ,KAAK,EAAC,MAIL;IAJaK,QAAM,wDAAUC,uDAAV,EAAsB,WAAtB;EAInB,CAJP,mBACIC,oBAAsF,OAAtF,EAAsF;+DAAtEC,WAAEC,OAAoE;IAAlET,KAAK,mBAAC,cAAD,EAAe,CAAUQ,aAAV,IAAiB,qBAAhC;EAA6D,CAAtF;;EAAA,kBAAgBA,cACsBA,+BAAtCJ,oBAAiE,MAAjE,cAAiEM,iBAAfF,WAAe,CAAjE,EAAuD;EAAA;EAAvD,wCACAD,oBAAyE,QAAzE,cAA2D,OAA3D,EAAgE;EAAA;EAAhE,EAHJ;;EAAA","names":["class","type","ref","disabled","_createElementBlock","onSubmit","$options","_createElementVNode","$data","$event","_toDisplayString"],"sourceRoot":"","sources":["D:\\lead-hit\\src\\components\\form\\AuthForm.vue"],"sourcesContent":["<template>\r\n    <form class=\"form\" @submit.prevent=\"handleSubmit\">\r\n        <input v-model=\"id\" class=\"custom-input\" :class=\"!isValid && 'custom-input--error'\" />\r\n        <span class=\"form__error-text\" v-if=\"!isValid\">{{ error }}</span>\r\n        <button class=\"form__btn\" type=\"submit\" ref=\"btn\" disabled>Войти</button>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\nimport { getAuth } from \"../../services/auth.service\";\r\nimport {\r\n    emailValidation,\r\n    isRequired\r\n} from \"../../utils/validationRules.js\";\r\nexport default {\r\n\r\n    data() {\r\n        return {\r\n            id: \"\",\r\n            isValid: true,\r\n            error: \"\",\r\n            errorMessage:'error'\r\n        };\r\n    },\r\n    \r\n    methods: {\r\n        async handleSubmit() {\r\n            \r\n            this.$emit(\"submit\", {\r\n                id: this.id,\r\n            });\r\n\r\n            try {\r\n                const { data } = await getAuth(this.id);\r\n                this.$router.push({ name: \"analytics\" });\r\n                if (data?.message) {\r\n                    localStorage.setItem('leadhit-site-id', this.id )\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        },\r\n\r\n        validete(value) {\r\n            const { hasPassed, message } = this.rules.emailValidation(value)\r\n            console.log(hasPassed);\r\n            this.$refs.btn.disabled = !hasPassed\r\n            if (!hasPassed) {\r\n                this.error = message || this.errorMessage;\r\n                this.isValid = hasPassed\r\n                return\r\n            }\r\n            this.isValid = hasPassed\r\n        },\r\n    },\r\n\r\n    computed: {\r\n        rules() {\r\n            return {\r\n                emailValidation,\r\n                isRequired\r\n            };\r\n        },\r\n    },\r\n\r\n    watch: {\r\n        id(v) {\r\n            this.validete(v);\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n   .form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n   }\r\n   .custom-input {\r\n       min-height: 40px;\r\n        font-size: 18px;\r\n        outline: none;\r\n        line-height: inherit;\r\n        padding: 8px 15px;\r\n   }\r\n        .custom-input::placeholder {\r\n            color: inherit;\r\n        }\r\n                .custom-input--error {\r\n                    border-color: red;\r\n                }\r\n\r\n            .form__error-text {\r\n                font-size: 12px;\r\n                color: red;\r\n            }\r\n\r\n                .form__btn {\r\n                    width: 100px;\r\n                    height: 40px;\r\n\r\n                    border: none;\r\n                    margin-top: 40px;\r\n                }\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}