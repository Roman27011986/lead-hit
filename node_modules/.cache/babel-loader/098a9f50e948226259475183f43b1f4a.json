{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Indicator } from \"./Indicator\";\nimport { LineSeries } from \"../../xy/series/LineSeries\";\nimport * as $array from \"../../../core/util/Array\";\n/**\r\n * An implementation of a [[StockChart]] indicator.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\n\nvar MovingAverage =\n/** @class */\nfunction (_super) {\n  __extends(MovingAverage, _super);\n\n  function MovingAverage() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_editableSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [{\n        key: \"period\",\n        name: _this.root.language.translateAny(\"Period\"),\n        type: \"number\"\n      }, {\n        key: \"offset\",\n        name: _this.root.language.translateAny(\"Offset\"),\n        type: \"number\"\n      }, {\n        key: \"seriesColor\",\n        name: _this.root.language.translateAny(\"Color\"),\n        type: \"color\"\n      }, {\n        key: \"field\",\n        name: _this.root.language.translateAny(\"Field\"),\n        type: \"dropdown\",\n        options: [\"open\", \"close\", \"low\", \"high\", \"hl/2\", \"hlc/3\", \"hlcc/4\", \"ohlc/4\"]\n      }, {\n        key: \"type\",\n        name: _this.root.language.translateAny(\"Type\"),\n        type: \"dropdown\",\n        options: [\"simple\", \"weighted\", \"exponential\", \"dema\", \"tema\"]\n      }]\n    });\n    return _this;\n  }\n\n  Object.defineProperty(MovingAverage.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.isDirty(\"type\") || this.isDirty(\"offset\")) {\n        this._dataDirty = true;\n        this.setCustomData(\"type\", this.get(\"type\"));\n        this.setCustomData(\"offset\", this.get(\"offset\", 0));\n      }\n\n      _super.prototype._prepareChildren.call(this);\n    }\n  });\n  Object.defineProperty(MovingAverage.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterNew.call(this);\n\n      var stockSeries = this.get(\"stockSeries\");\n      var chart = stockSeries.chart;\n\n      if (chart) {\n        var series = chart.series.push(LineSeries.new(this._root, {\n          valueXField: \"valueX\",\n          valueYField: \"ma\",\n          groupDataDisabled: true,\n          calculateAggregates: true,\n          xAxis: stockSeries.get(\"xAxis\"),\n          yAxis: stockSeries.get(\"yAxis\"),\n          themeTags: [\"indicator\", \"movingaverage\"],\n          name: \"MA\"\n        }));\n        series.setPrivate(\"baseValueSeries\", stockSeries);\n        this.series = series;\n\n        this._handleLegend(series);\n      }\n    }\n  });\n  Object.defineProperty(MovingAverage.prototype, \"_dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var stockChart = this.get(\"stockChart\");\n      var series = this.series;\n      series.dispose();\n\n      if (stockChart) {\n        var legend = this.get(\"legend\");\n\n        if (legend) {\n          var legendDataItem = series.get(\"legendDataItem\");\n\n          if (legendDataItem) {\n            legend.disposeDataItem(legendDataItem);\n          }\n        }\n\n        stockChart.indicators.removeValue(this);\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(MovingAverage.prototype, \"prepareData\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (this.series) {\n        var period = this.get(\"period\", 50);\n        var type = this.get(\"type\");\n        var stockSeries = this.get(\"stockSeries\");\n        var dataItems_1 = stockSeries.dataItems;\n\n        var data = this._getDataArray(dataItems_1);\n\n        switch (type) {\n          case \"simple\":\n            this._sma(data, period, \"value_y\", \"ma\");\n\n            break;\n\n          case \"weighted\":\n            this._wma(data, period, \"value_y\", \"ma\");\n\n            break;\n\n          case \"exponential\":\n            this._ema(data, period, \"value_y\", \"ma\");\n\n            break;\n\n          case \"dema\":\n            this._dema(data, period, \"value_y\", \"ma\");\n\n            break;\n\n          case \"tema\":\n            this._tema(data, period, \"value_y\", \"ma\");\n\n            break;\n        }\n\n        var offset_1 = this.get(\"offset\", 0);\n\n        if (offset_1 != 0) {\n          var i_1 = 0;\n          var baseDuration_1 = this.series.get(\"xAxis\").baseDuration();\n          var len_1 = dataItems_1.length;\n          var firstTime_1 = dataItems_1[0].get(\"valueX\", 0);\n          var lastTime_1 = dataItems_1[len_1 - 1].get(\"valueX\", 0);\n          $array.each(data, function (dataItem) {\n            var newX = 0;\n\n            if (i_1 + offset_1 >= len_1) {\n              newX = lastTime_1 + (offset_1 - len_1 + i_1 + 1) * baseDuration_1;\n            } else if (i_1 + offset_1 < 0) {\n              newX = firstTime_1 + (i_1 + offset_1) * baseDuration_1;\n            } else {\n              newX = dataItems_1[i_1 + offset_1].get(\"valueX\", 0);\n            }\n\n            dataItem.valueX = newX;\n            i_1++;\n          });\n        }\n\n        this.series.data.setAll(data);\n      }\n    }\n  });\n  Object.defineProperty(MovingAverage, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"MovingAverage\"\n  });\n  Object.defineProperty(MovingAverage, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Indicator.classNames.concat([MovingAverage.className])\n  });\n  return MovingAverage;\n}(Indicator);\n\nexport { MovingAverage };","map":{"version":3,"mappings":"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","names":["Indicator","LineSeries","$array","__extends","Object","key","name","_this","root","language","translateAny","type","options","isDirty","_dataDirty","setCustomData","get","_super","_prepareChildren","call","_afterNew","stockSeries","chart","series","push","new","_root","valueXField","valueYField","groupDataDisabled","calculateAggregates","xAxis","yAxis","themeTags","setPrivate","_handleLegend","stockChart","dispose","legend","legendDataItem","disposeDataItem","indicators","removeValue","period","dataItems_1","dataItems","data","_getDataArray","_sma","_wma","_ema","_dema","_tema","offset_1","i_1","baseDuration_1","baseDuration","len_1","length","firstTime_1","lastTime_1","each","dataItem","newX","valueX","setAll","classNames","concat","MovingAverage","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/indicators/MovingAverage.ts"],"sourcesContent":["import type { DateAxis } from \"../../xy/axes/DateAxis\";\r\nimport type { AxisRenderer } from \"../../xy/axes/AxisRenderer\";\r\n\r\nimport { Indicator, IIndicatorSettings, IIndicatorPrivate, IIndicatorEvents, IIndicatorEditableSetting } from \"./Indicator\";\r\nimport { LineSeries } from \"../../xy/series/LineSeries\";\r\n\r\nimport * as $array from \"../../../core/util/Array\";\r\n\r\nexport interface IMovingAverageSettings extends IIndicatorSettings {\r\n\r\n\t/**\r\n\t * Type of the moving average.\r\n\t *\r\n\t * @default \"simple\"\r\n\t */\r\n\ttype?: \"simple\" | \"weighted\" | \"exponential\" | \"dema\" | \"tema\";\r\n\r\n\t/**\r\n\t * Offset.\r\n\t * \r\n\t * @defaul 0\r\n\t */\r\n\toffset?: number;\r\n\r\n}\r\n\r\nexport interface IMovingAveragePrivate extends IIndicatorPrivate {\r\n}\r\n\r\nexport interface IMovingAverageEvents extends IIndicatorEvents {\r\n}\r\n\r\n/**\r\n * An implementation of a [[StockChart]] indicator.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\r\nexport class MovingAverage extends Indicator {\r\n\tpublic static className: string = \"MovingAverage\";\r\n\tpublic static classNames: Array<string> = Indicator.classNames.concat([MovingAverage.className]);\r\n\r\n\tdeclare public _settings: IMovingAverageSettings;\r\n\tdeclare public _privateSettings: IMovingAveragePrivate;\r\n\tdeclare public _events: IMovingAverageEvents;\r\n\r\n\t/**\r\n\t * Indicator series.\r\n\t */\r\n\tdeclare public series: LineSeries;\r\n\r\n\tpublic _editableSettings: IIndicatorEditableSetting[] = [{\r\n\t\tkey: \"period\",\r\n\t\tname: this.root.language.translateAny(\"Period\"),\r\n\t\ttype: \"number\"\r\n\t}, {\r\n\t\tkey: \"offset\",\r\n\t\tname: this.root.language.translateAny(\"Offset\"),\r\n\t\ttype: \"number\"\r\n\t}, {\r\n\t\tkey: \"seriesColor\",\r\n\t\tname: this.root.language.translateAny(\"Color\"),\r\n\t\ttype: \"color\"\r\n\t}, {\r\n\t\tkey: \"field\",\r\n\t\tname: this.root.language.translateAny(\"Field\"),\r\n\t\ttype: \"dropdown\",\r\n\t\toptions: [\"open\", \"close\", \"low\", \"high\", \"hl/2\", \"hlc/3\", \"hlcc/4\", \"ohlc/4\"]\r\n\t}, {\r\n\t\tkey: \"type\",\r\n\t\tname: this.root.language.translateAny(\"Type\"),\r\n\t\ttype: \"dropdown\",\r\n\t\toptions: [\"simple\", \"weighted\", \"exponential\", \"dema\", \"tema\"]\r\n\t}];\r\n\r\n\tpublic _prepareChildren() {\r\n\r\n\t\tif (this.isDirty(\"type\") || this.isDirty(\"offset\")) {\r\n\t\t\tthis._dataDirty = true;\r\n\t\t\tthis.setCustomData(\"type\", this.get(\"type\"));\r\n\t\t\tthis.setCustomData(\"offset\", this.get(\"offset\", 0));\r\n\t\t}\r\n\r\n\t\tsuper._prepareChildren();\r\n\t}\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\r\n\t\tconst stockSeries = this.get(\"stockSeries\");\r\n\t\tconst chart = stockSeries.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tconst series = chart.series.push(LineSeries.new(this._root, {\r\n\t\t\t\tvalueXField: \"valueX\",\r\n\t\t\t\tvalueYField: \"ma\",\r\n\t\t\t\tgroupDataDisabled: true,\r\n\t\t\t\tcalculateAggregates: true,\r\n\t\t\t\txAxis: stockSeries.get(\"xAxis\"),\r\n\t\t\t\tyAxis: stockSeries.get(\"yAxis\"),\r\n\t\t\t\tthemeTags: [\"indicator\", \"movingaverage\"],\r\n\t\t\t\tname: \"MA\"\r\n\t\t\t}))\r\n\r\n\t\t\tseries.setPrivate(\"baseValueSeries\", stockSeries);\r\n\t\t\tthis.series = series;\r\n\r\n\t\t\tthis._handleLegend(series);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _dispose() {\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\r\n\t\tconst series = this.series;\r\n\t\tseries.dispose();\r\n\r\n\t\tif (stockChart) {\r\n\t\t\tconst legend = this.get(\"legend\");\r\n\t\t\tif (legend) {\r\n\t\t\t\tconst legendDataItem = series.get(\"legendDataItem\");\r\n\t\t\t\tif (legendDataItem) {\r\n\t\t\t\t\tlegend.disposeDataItem(legendDataItem as any);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstockChart.indicators.removeValue(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic prepareData() {\r\n\t\tif (this.series) {\r\n\t\t\tlet period = this.get(\"period\", 50);\r\n\t\t\tconst type = this.get(\"type\");\r\n\t\t\tconst stockSeries = this.get(\"stockSeries\");\r\n\t\t\tconst dataItems = stockSeries.dataItems;\r\n\r\n\t\t\tlet data = this._getDataArray(dataItems);\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"simple\":\r\n\t\t\t\t\tthis._sma(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"weighted\":\r\n\t\t\t\t\tthis._wma(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"exponential\":\r\n\t\t\t\t\tthis._ema(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"dema\":\r\n\t\t\t\t\tthis._dema(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"tema\":\r\n\t\t\t\t\tthis._tema(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst offset = this.get(\"offset\", 0);\r\n\r\n\r\n\t\t\tif (offset != 0) {\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tconst baseDuration = (this.series.get(\"xAxis\") as DateAxis<AxisRenderer>).baseDuration();\r\n\t\t\t\tconst len = dataItems.length;\r\n\t\t\t\tconst firstTime = dataItems[0].get(\"valueX\", 0);\r\n\t\t\t\tconst lastTime = dataItems[len - 1].get(\"valueX\", 0);\r\n\r\n\t\t\t\t$array.each(data, (dataItem) => {\r\n\t\t\t\t\tlet newX: number = 0;\r\n\r\n\t\t\t\t\tif (i + offset >= len) {\r\n\t\t\t\t\t\tnewX = lastTime + (offset - len + i + 1) * baseDuration;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (i + offset < 0) {\r\n\t\t\t\t\t\tnewX = firstTime + (i + offset) * baseDuration;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tnewX = dataItems[i + offset].get(\"valueX\", 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.valueX = newX;\r\n\r\n\t\t\t\t\ti++;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.data.setAll(data);\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}